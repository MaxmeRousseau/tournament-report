scalar uuid
scalar date
scalar DateTime

type Query {
  tournament(id: uuid!): Tournament
  tournamentsByPlayer(playerId: uuid!): [Tournament!]!

  round(id: uuid!): Round
  roundsByTournament(tournamentId: uuid!): [Round!]!

  players: [User!]!
  player(id: uuid!): User
}

type Mutation {
  createTournament(name: String!, date: date!): Tournament!
  createMatch(tournamentId: uuid!): Round!

}


type User {
  uuid: uuid!
  email: String!
  name: String
  role: String!
  tournaments: [Tournament!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Tournament {
  uuid: uuid!
  name: String!
  date: DateTime!
  location: String!
  description: String
  userId: uuid!
  rounds: [Round!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Round {
  uuid: uuid!
  number: Int!
  tournamentId: uuid!
  results: String!
  diceRolls: String!
  notes: String
  createdAt: DateTime!
  updatedAt: DateTime!
}


